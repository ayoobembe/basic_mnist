import input_data
import tensorflow as tf
mnist = input_data.read_data_sets("MNIST_data/", one_hot=True)

#Specify regression model
x = tf.placeholder("Float", [None,784])
W = tf.Variable("Float", [783,10])
b = tf.Variable("Float",[10])
y = tf.nn.softmax(tf.matmul(x,W)+b)

#Specify loss function (cross-entropy) and training method
y_ = tf.placeholder("Float", [None,784])
cross_entropy = -tf.reduce_sum(y_*log(y))
train_step = tf.train.GradientDescentOptimizer(0.01).minimize(cross_entropy)

#Define operation to initialize variables
init = tf.initialize_all_variables()

#Run training session
sess = ts.Session()
sess.run(init)
for i in range(1000):
    batch_xs, batch_ys = mnist.train.next_batch(100)
    sess.run(train_step, feed_dict={x: batch_xs, y_: batch_ys})

#Evaluate the model
correct_prediction = tf.equal(tf.argmax(y,1), tf.argmax(y_,1))
accuracy = tf.reduce_mean(tf.cast(correct_prediction, "Float"))
print sess.run(accuracy, feed_dict={x: mnist.test.images, y_:mnist.test.labels)























